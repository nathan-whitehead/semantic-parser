{
  "task_id": 915,
  "code": "def candidate(nums):\n    # Separate positive and negative numbers into different lists while preserving their original order\n    positives = [num for num in nums if num > 0]\n    negatives = [num for num in nums if num < 0]\n\n    # Combine the lists, with negative numbers first\n    result = []\n    i, j = 0, 0\n\n    # Loop until one of the lists is exhausted\n    while i < len(positives) and j < len(negatives):\n        # If the current positive number is greater than or equal to the absolute value of the next negative number,\n        # append the next negative number to the result\n        if abs(positives[i]) >= abs(negatives[j]):\n            result.append(negatives[j])\n            j += 1\n        # Otherwise, append the current positive number to the result\n        else:\n            result.append(positives[i])\n            i += 1\n\n    # Append any remaining numbers from either list to the result\n    result.extend(positives[i:])\n    result.extend(negatives[j:])\n\n    return result",
  "explanation": "Explanation\n================\n\nThe provided code attempts to rearrange positive and negative numbers in a given array using lambda function, but it has several issues that cause the execution to timeout. The main problem is the use of list comprehension for popping elements from `neg_nums` inside the loop, which can lead to an infinite loop if there are no matching negative numbers for a positive number.\n\nCode\n=====",
  "num_iterations": 6,
  "error_msg": "Traceback (most recent call last):\n  File \"/home/runner/sandbox/temp_code.py\", line 28, in <module>\n    assert candidate([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError\n\n",
  "success": false
}