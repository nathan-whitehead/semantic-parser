{
  "task_id": 551,
  "code": "# python\n\ndef candidate(nested_list, column_index):\n    \"\"\"\n    Extracts a specified column from a given nested list.\n\n    Args:\n        nested_list (list): The input list.\n        column_index (int): The index of the desired column.\n\n    Returns:\n        list: A new list containing only the specified column.\n    \"\"\"\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Define a helper function to perform the recursive extraction\n    def extract_helper(sublist, index):\n        for element in sublist:\n            if isinstance(element, list) and element:\n                new_result = extract_helper(element, 0)\n                result.extend(new_result)\n            elif isinstance(element, (int, float)):\n                if index == column_index:\n                    result.append(element)\n\n    # Call the helper function to start the extraction\n    extract_helper(nested_list, 0)\n\n    # Return the extracted column\n    return result",
  "explanation": "Explanation\n-----------\n\nThe code attempts to recursively extract a specified column from a nested list. However, the implementation has several issues, including incorrect handling of sublists and missing initial value assignment.\n\nCode\n-----",
  "num_iterations": 6,
  "error_msg": "Traceback (most recent call last):\n  File \"/home/runner/sandbox/temp_code.py\", line 34, in <module>\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\n           ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/sandbox/temp_code.py\", line 29, in candidate\n    extract_helper(nested_list, 0)\n    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\n  File \"/home/runner/sandbox/temp_code.py\", line 23, in extract_helper\n    result.extend(new_result)\n    ~~~~~~~~~~~~~^^^^^^^^^^^^\nTypeError: 'NoneType' object is not iterable\n\n",
  "success": false
}